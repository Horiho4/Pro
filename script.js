$(document).ready(function () {
  let notes = [];

  let editIndex = null;

// –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª–∫–∏
$('#noteList').on('click', '.edit-btn', function () {
  editIndex = $(this).closest('li').data('index');
  const note = notes[editIndex];

  $('#editTitle').val(note.title);
  $('#editText').val(note.text);  // note.text - —Ä—è–¥–æ–∫

  $('#editModal, #overlay').show();
});

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è
$('#editSaveBtn').click(function () {
  const newTitle = $('#editTitle').val().trim();
  const newTextRaw = $('#editText').val();
 // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ—Ä–æ–∂–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
  if (!newTitle || !newTextRaw.trim()) {
    alert('–ó–∞–≥–æ–ª–æ–≤–æ–∫ —ñ —Ç–µ–∫—Å—Ç –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º–∏!');
    return;
  }

  notes[editIndex].title = newTitle;  // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
  notes[editIndex].text = newTextRaw;  // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä—è–¥–æ–∫

  saveNotes();
  renderNotes();
  // –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª–∫–∏
  $('#editModal, #overlay').hide();
  editIndex = null;
});


  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–æ–∫ –∑ localStorage
  function loadNotes() {
    const saved = localStorage.getItem('notes');
    if (saved) {
      notes = JSON.parse(saved);
    }
    renderNotes();
  }

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–æ–∫ —É localStorage
  function saveNotes() {
    localStorage.setItem('notes', JSON.stringify(notes));
  }

function renderNotes() {
  $('#noteList').empty();
  notes.forEach((note, index) => {
    // –Ø–∫—â–æ —Ç–µ–∫—Å—Ç ‚Äî —Ä—è–¥–æ–∫, —Ä–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ –º–∞—Å–∏–≤ —Ä—è–¥–∫—ñ–≤
    const lines = Array.isArray(note.text) ? note.text : note.text.split('\n');
    // –°—Ç–≤–æ—Ä—é—î–º–æ HTML –¥–ª—è –∫–æ–∂–Ω–æ—ó –Ω–æ—Ç–∞—Ç–∫–∏
    const noteHTML = `
      <li class="note-item ${note.archived ? 'archived' : ''}" data-index="${index}">
        <h3>${note.title}</h3>
        <div class="note-lines">
          ${lines.map((line, lineIndex) => `
            <div class="note-line">
              <input type="checkbox" class="note-line-checkbox" data-note="${index}" data-line="${lineIndex}">
              <span>${line}</span>
            </div>
          `).join('')}
        </div>
        <time>${note.time}</time>
        <div class="note-buttons">
          <button class="edit-btn">
            <img src="images/–¥–∞.png" alt= "—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏" width="20" height= "20">
          </button>
          <button class="archive-btn" title="${note.archived ? '–†–æ–∑–∞—Ä—Ö—ñ–≤—É–≤–∞—Ç–∏' : '–ê—Ä—Ö—ñ–≤—É–≤–∞—Ç–∏'}">
          <img src="${note.archived ? 'images/archive.png' : 'images/archive.png'}" alt="${note.archived ? '–†–æ–∑–∞—Ä—Ö—ñ–≤—É–≤–∞—Ç–∏' : '–ê—Ä—Ö—ñ–≤—É–≤–∞—Ç–∏'}" width="20" height="20">
        </button>
        <button class="delete-btn" title="–í–∏–¥–∞–ª–∏—Ç–∏">
        <img src="images/dokit.png" alt="–í–∏–¥–∞–ª–∏—Ç–∏" width="20" height="20">
      </button>
    </div>
  </li>
`;
    

    $('#noteList').append(noteHTML); // –î–æ–¥–∞—î–º–æ –Ω–æ—Ç–∞—Ç–∫—É –¥–æ —Å–ø–∏—Å–∫—É
  });
}


  $('#addNoteBtn').click(function () {
    const title = $('#noteTitle').val().trim();
    const text = $('#noteText').val().trim();
    if (!title || !text) return;

    const newNote = {
      title,
      text,
      time: new Date().toLocaleString(),
      archived: false
    };

    notes.push(newNote);
    saveNotes();
    renderNotes();

    $('#noteTitle').val('');
    $('#noteText').val('');
  });

  /*$('#noteList').on('click', '.edit-btn', function () {
    const index = $(this).closest('li').data('index');
    const note = notes[index];

    const newTitle = prompt('–ù–æ–≤–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:', note.title);
    const newText = prompt('–ù–æ–≤–∏–π —Ç–µ–∫—Å—Ç:', note.text);

    if (newTitle !== null && newText !== null) {
      note.title = newTitle.trim() || note.title;
      note.text = newText.trim() || note.text;
      saveNotes();
      renderNotes();
    }
  });*/

  $('#noteList').on('click', '.archive-btn', function () {
    const index = $(this).closest('li').data('index');
    notes[index].archived = !notes[index].archived;
    saveNotes();
    renderNotes();
  });

  $('#noteList').on('click', '.delete-btn', function () {
    const index = $(this).closest('li').data('index');
    notes.splice(index, 1);
    saveNotes();
    renderNotes();
  });

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–æ–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
  loadNotes();
  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–æ–∫ –∑ —Ñ–∞–π–ª—É
// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–æ–∫ –∑ —Ñ–∞–π–ª—É
$('#saveNotes').click(function () {
  const fileInput = document.getElementById('loadNotesFile');
  const file = fileInput.files[0];
  if (!file) {
    alert('–û–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–æ–∫.');
    return;
  }

  const reader = new FileReader();
  reader.onload = function (e) {
    try {
      const text = e.target.result;

      // –†–æ–∑–¥—ñ–ª—è—î–º–æ —Ñ–∞–π–ª –ø–æ –±–ª–æ–∫–∞–º –Ω–æ—Ç–∞—Ç–æ–∫
      const noteBlocks = text.split(/-+\n\n/).filter(block => block.trim() !== '');

      const loadedNotes = noteBlocks.map(block => {
        const titleMatch = block.match(/–ó–∞–≥–æ–ª–æ–≤–æ–∫:\s*(.*)/);
        const textMatch = block.match(/–¢–µ–∫—Å—Ç:\s*(.*)/);
        const timeMatch = block.match(/–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è:\s*(.*)/);
        const archivedMatch = block.match(/–ê—Ä—Ö—ñ–≤–æ–≤–∞–Ω–∞:\s*(–¢–∞–∫|–ù—ñ)/);

        return {
          title: titleMatch ? titleMatch[1].trim() : '–ë–µ–∑ –Ω–∞–∑–≤–∏',
          text: textMatch ? textMatch[1].trim() : '',
          time: timeMatch ? timeMatch[1].trim() : new Date().toLocaleString(),
          archived: archivedMatch ? archivedMatch[1] === '–¢–∞–∫' : false
        };
      });

      notes = notes.concat(loadedNotes);
      saveNotes();
      renderNotes();
      alert('–ù–æ—Ç–∞—Ç–∫–∏ –∑ —Ñ–∞–π–ª—É —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω—ñ!');
      fileInput.value = ''; // –æ—á–∏—Å—Ç–∫–∞
    } catch (error) {
      alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –Ω–æ—Ç–∞—Ç–æ–∫: ' + error.message);
    }
  };

  reader.readAsText(file);
  
});
$('#installNotesBtn').click(function () {
  let textContent = '';

  notes.forEach((note, i) => {
    textContent += `–ù–æ—Ç–∞—Ç–∫–∞ ${i + 1}:\n`;
    textContent += `–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${note.title}\n`;
    textContent += `–¢–µ–∫—Å—Ç: ${note.text}\n`;
    textContent += `–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: ${note.time}\n`;
    textContent += `–ê—Ä—Ö—ñ–≤–æ–≤–∞–Ω–∞: ${note.archived ? '–¢–∞–∫' : '–ù—ñ'}\n`;
    textContent += '\n----------------------\n\n';
  });

  const blob = new Blob([textContent], { type: 'text/plain;charset=utf-8' });
  const url = URL.createObjectURL(blob);

  const a = document.createElement('a');
  a.href = url;
  a.download = '—É—Å—ñ_–Ω–æ—Ç–∞—Ç–∫–∏.txt';
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
});

$(document).ready(function() {
  $('#themeToggle').click(function() {
    $('body').toggleClass('dark-theme');
    
    if ($('body').hasClass('dark-theme')) {
      $('#themeToggle').text('‚òÄÔ∏è –°–≤—ñ—Ç–ª–∞ —Ç–µ–º–∞');
    } else {
      $('#themeToggle').text('üåô –¢–µ–º–Ω–∞ —Ç–µ–º–∞');
    }
  });
});


});
